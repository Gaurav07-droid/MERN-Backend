{"version":3,"sources":["places/pages/NewPlace.js"],"names":["i","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","image","description","address","formState","inputHandler","history","useHistory","placeSubmitHandler","e","preventDefault","formData","FormData","append","inputs","userId","process","Authoriation","token","push","Fragment","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","disabled"],"mappings":"wQACA,kmGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQA4HeC,UA5GE,WACf,IAAMC,EAAOC,qBAAWC,KAExB,EAAsDC,cAA9CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAEvC,EAAkCC,YAChC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,MAAO,CACLF,MAAO,KACPC,SAAS,GAEXE,YAAa,CACXH,MAAO,GACPC,SAAS,GAEXG,QAAS,CACPJ,MAAO,GACPC,SAAS,KAGb,GACD,mBApBMI,EAAS,KAAEC,EAAY,KAsBxBC,EAAUC,cAEVC,EAAkB,uCAAG,WAAOC,GAAC,uEAiB/B,OAhBFA,EAAEC,iBAAiB,UAGXC,EAAW,IAAIC,UAEZC,OAAO,QAAST,EAAUU,OAAOhB,MAAMC,OAChDY,EAASE,OAAO,cAAeT,EAAUU,OAAOZ,YAAYH,OAC5DY,EAASE,OAAO,UAAWT,EAAUU,OAAOX,QAAQJ,OACpDY,EAASE,OAAO,QAAST,EAAUU,OAAOb,MAAMF,OAChDY,EAASE,OAAO,UAAWxB,EAAK0B,QAOhC,UAEMpB,EAAY,GAAD,OACZqB,4BAAiC,WACpC,OACAL,EACA,CACE,eAAgB,oBAGlB,CAAEM,aAAc,UAAiB5B,EAAK6B,QACtC,KAAD,GAGDZ,EAAQa,KAAK,KAAK,4GAErB,gBAjCuB,sCAmCxB,OACE,kBAAC,IAAMC,SAAQ,KACb,kBAAC,IAAU,CAAC1B,MAAOA,EAAO2B,QAASzB,IACnC,0BAAM0B,UAAU,aAAaC,SAAUf,GACpCf,GAAa,kBAAC,IAAc,CAAC+B,WAAS,IACvC,kBAAC,IAAK,CACJC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,+BACVC,QAAS3B,IAGX,kBAAC,IAAK,CACJoB,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACI,YAAoB,IACjCF,UAAU,oDACVC,QAAS3B,IAEX,kBAAC,IAAK,CACJoB,GAAG,UACHC,QAAQ,QACRE,MAAM,UACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS3B,IAEX,kBAAC,IAAW,CACVoB,GAAG,QACHO,QAAS3B,EACT0B,UAAW,4BAEb,kBAAC,IAAM,CAACJ,KAAK,SAASO,UAAW9B,EAAUJ,SAAQ","file":"static/js/8.3a95f51f.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/Validators\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/imageUpload\";\r\nimport \"./PlaceForm.css\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nconst NewPlace = () => {\r\n  const auth = useContext(AuthContext);\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      image: {\r\n        value: null,\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      address: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const history = useHistory();\r\n\r\n  const placeSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const formData = new FormData();\r\n\r\n      formData.append(\"title\", formState.inputs.title.value);\r\n      formData.append(\"description\", formState.inputs.description.value);\r\n      formData.append(\"address\", formState.inputs.address.value);\r\n      formData.append(\"image\", formState.inputs.image.value);\r\n      formData.append(\"creator\", auth.userId);\r\n      //BODY PART OF THE REQUEST\r\n      // JSON.stringify({\r\n      //   title: formState.inputs.title.value,\r\n      //   description: formState.inputs.description.value,\r\n      //   address: formState.inputs.address.value,\r\n      //   creator: auth.userId,\r\n      // })\r\n\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/places`,\r\n        \"POST\",\r\n        formData,\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        // eslint-disable-next-line no-useless-concat\r\n        { Authoriation: \"Bearer\" + \" \" + auth.token }\r\n      );\r\n\r\n      //Redirect to the different page\r\n      history.push(\"/\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <Input\r\n          id=\"title\"\r\n          element=\"input\"\r\n          type=\"text\"\r\n          label=\"Title\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter a valid title .\"\r\n          onInput={inputHandler}\r\n        />\r\n\r\n        <Input\r\n          id=\"description\"\r\n          element=\"textarea\"\r\n          label=\"Description\"\r\n          validators={[VALIDATOR_MINLENGTH(5)]}\r\n          errorText=\"Please enter description (at least 5 characters).\"\r\n          onInput={inputHandler}\r\n        />\r\n        <Input\r\n          id=\"address\"\r\n          element=\"input\"\r\n          label=\"Address\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          errorText=\"Please enter valid address.\"\r\n          onInput={inputHandler}\r\n        />\r\n        <ImageUpload\r\n          id=\"image\"\r\n          onInput={inputHandler}\r\n          errorText={\"Please upload an image!\"}\r\n        />\r\n        <Button type=\"submit\" disabled={!formState.isValid}>\r\n          ADD PLACE\r\n        </Button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewPlace;\r\n"],"sourceRoot":""}