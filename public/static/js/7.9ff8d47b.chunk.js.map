{"version":3,"sources":["shared/components/UIElements/Card.js","users/pages/Auth.js"],"names":["Card","props","className","style","children","Authorization","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","fileIsValid","formState","inputHandler","setFormData","authSubmitHandler","e","preventDefault","process","JSON","stringify","inputs","resData","login","data","_id","token","formData","FormData","append","name","image","Fragment","onClear","asOverlay","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,iOCNb,06MA8KeC,UA5JO,WACpB,IAAMC,EAAOC,qBAAWC,KACxB,EAAsCC,oBAAS,GAAK,mBAA7CC,EAAW,KAAEC,EAAc,KAElC,EAAsDC,cAA9CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAEvC,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,SAAU,CACRF,MAAO,GACPG,aAAa,KAGjB,GACD,mBAZMC,EAAS,KAAEC,EAAY,KAAEC,EAAW,KA2CrCC,EAAiB,uCAAG,WAAOC,GAAC,2EACb,GAAnBA,EAAEC,kBAEElB,EAAY,CAAD,yCAEWK,EAAY,GAAD,OAC5Bc,4BAAiC,gBACpC,OACAC,KAAKC,UAAU,CACbb,MAAOK,EAAUS,OAAOd,MAAMC,MAC9BE,SAAUE,EAAUS,OAAOX,SAASF,QAEtC,CACE,eAAgB,qBAElB,KAAD,EAVKc,EAAO,OAWb3B,EAAK4B,MAAMD,EAAQE,KAAKC,IAAKH,EAAQI,OAAO,gFAQe,OAJvDC,EAAW,IAAIC,UACZC,OAAO,QAASjB,EAAUS,OAAOd,MAAMC,OAChDmB,EAASE,OAAO,OAAQjB,EAAUS,OAAOS,KAAKtB,OAC9CmB,EAASE,OAAO,QAASjB,EAAUS,OAAOU,MAAMvB,OAChDmB,EAASE,OAAO,WAAYjB,EAAUS,OAAOX,SAASF,OAAO,oBAGrCJ,EACpB,yCACA,OAMAuB,EACA,CACE,eAAgB,qBAElB,KAAD,GAZKL,EAAO,OAab3B,EAAK4B,MAAMD,EAAQE,KAAKC,IAAKH,EAAQI,OAAO,oHAGjD,gBA3CsB,sCA6CvB,OACE,kBAAC,IAAMM,SAAQ,KACb,kBAAC,IAAU,CAAC7B,MAAOA,EAAO8B,QAAS5B,IAEnC,kBAAC,IAAI,CAACd,UAAU,kBACbW,GAAa,kBAAC,IAAc,CAACgC,WAAS,IACtCnC,EAAc,+CAA2B,6CAC1C,6BACA,0BAAMoC,SAAUpB,IACZhB,GACA,kBAAC,IAAK,CACJqC,GAAG,OACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,2BACVC,QAAS9B,KAGXd,GACA,kBAAC,IAAW,CACVqC,GAAG,QACHQ,QAAM,EACND,QAAS9B,EACT6B,UAAW,4BAGf,kBAAC,IAAK,CACJN,GAAG,QACHC,QAAQ,QACRC,KAAK,QACLC,MAAM,SACNC,WAAY,CAACK,eACbH,UAAU,6BACVC,QAAS9B,IAEX,kBAAC,IAAK,CACJuB,GAAG,WACHE,KAAK,WACLD,QAAQ,QACRE,MAAM,WACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,uCACVC,QAAS9B,IAEX,kBAAC,IAAM,CAACyB,KAAK,SAASS,UAAWnC,EAAUH,SACxCV,EAAc,QAAU,WAG7B,kBAAC,IAAM,CACLiD,SAAO,EACPC,QA9HkB,WACnBlD,EAUHe,EAAY,2BAELF,EAAUS,QAAM,IACnBS,KAAM,CACJtB,MAAO,GACPC,SAAS,GAEXsB,MAAO,CACLvB,MAAO,KACPC,SAAS,MAGb,GArBFK,EAAY,2BAELF,EAAUS,QAAM,IACnBS,UAAMoB,EACNnB,WAAOmB,IAETtC,EAAUS,OAAOd,MAAME,SAAWG,EAAUS,OAAOX,SAASD,SAkBhET,GAAe,SAACmD,GAAQ,OAAMA,MAqGxBJ,SAAUnC,EAAUH,SAAQ,aAEjBV,EAAc,SAAW","file":"static/js/7.9ff8d47b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useContext, useState } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/imageUpload\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/Validators\";\r\n\r\nimport \"./Auth.css\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst Authorization = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        fileIsValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const resData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(resData.data._id, resData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      //for uploading an image we have t append the form\r\n      const formData = new FormData();\r\n      formData.append(\"email\", formState.inputs.email.value);\r\n      formData.append(\"name\", formState.inputs.name.value);\r\n      formData.append(\"image\", formState.inputs.image.value);\r\n      formData.append(\"password\", formState.inputs.password.value);\r\n\r\n      try {\r\n        const resData = await sendRequest(\r\n          \"http://localhost:5000/api/users/signup\",\r\n          \"POST\",\r\n          // JSON.stringify({\r\n          //   name: formState.inputs.name.value,\r\n          //   email: formState.inputs.email.value,\r\n          //   password: formState.inputs.password.value,\r\n          // }),\r\n          formData,\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(resData.data._id, resData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        {isLoginMode ? <h2>Login Required </h2> : <h2>Please Signup</h2>}\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              id=\"name\"\r\n              element=\"input\"\r\n              type=\"text\"\r\n              label=\"Your name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a your name\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              id=\"image\"\r\n              center\r\n              onInput={inputHandler}\r\n              errorText={\"Please upload an image!\"}\r\n            />\r\n          )}\r\n          <Input\r\n            id=\"email\"\r\n            element=\"input\"\r\n            type=\"email\"\r\n            label=\"E-mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            type=\"password\"\r\n            element=\"input\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(8)]}\r\n            errorText=\"Password must be 8 characters long !\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"Login\" : \"Signup\"}\r\n          </Button>\r\n        </form>\r\n        <Button\r\n          inverse\r\n          onClick={switchModeHandler}\r\n          disabled={formState.isValid}\r\n        >\r\n          Switch to {isLoginMode ? \"Signup\" : \"Login\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Authorization;\r\n"],"sourceRoot":""}